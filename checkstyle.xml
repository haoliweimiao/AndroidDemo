<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "http://checkstyle.sourceforge.net/dtds/configuration_1_3.dtd">

<module name="Checker">
    <!-- 更多配置情况参见： http://blog.csdn.net/yang1982_0907/article/details/18086693 -->

    <property name="charset" value="UTF-8" />
    <property name="severity" value="error" />

    <!-- Checks for Size Violations.  -->
    <!-- 检查文件的长度（行） default max=2500 -->
    <module name="FileLength">
        <property name="max" value="2000" />
        <property name="severity" value="warning" />
    </module>

    <!-- 检查源码中没有制表符（'\t'） -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true" />
    </module>

    <!--该节点可以把Java源文件的内容解析成语法树,并将语法树内容分发给子Module进行进一步的检测-->
    <module name="TreeWalker">
        <!--检查[标识符名称]中的缩写（连续大写字母）的长度，它也允许强制骆驼命名。(需要父Module TreeWalker 支持)-->
        <module name="AbbreviationAsWordInName">
            <!--当变量定义或类定义时,该检测有效-->
            <property name="tokens" value="VARIABLE_DEF,CLASS_DEF" />
            <!--一般来说,静态常量都是大写 忽略该检测-->
            <property name="ignoreStatic" value="true" />
            <!--最多可以连续打印3个大写字母,ZKCore正确,ZKCOre错误-->
            <property name="allowedAbbreviationLength" value="2" />
            <!--必须跳过检查的缩写列表。缩写列表应该用逗号隔开，不允许有空格。-->
            <property name="allowedAbbreviations" value="XML,URL" />
        </module>

        <!--验证抽象类的标识符-->
        <module name="AbstractClassName">
            <!--抽象类以ZKBase开头-->
            <property name="format" value="^ZKBase.+$" />
            <!--匹配名称的类的抽象修饰符丢失是否需要告警:默认就是false,因此可以不写-->
            <property name="ignoreModifier" value="false" />
        </module>

        <!--匿名内部类最大长度值:太过庞大的匿名内部类在后期维护会相当困难,因此需要保证让其短小精悍-->
        <module name="AnonInnerLength">
            <property name="max" value="100" />
        </module>

        <!--数组定义风格:C风格(String args[])还会Java风格(String[] args)-->
        <module name="ArrayTypeStyle">
            <property name="javaStyle" value="true" />
        </module>

        <module name="SuppressWarningsHolder" />
        <!--空格检测-->
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true" />
            <property name="allowEmptyMethods" value="true" />
            <property name="allowEmptyTypes" value="true" />
            <property name="allowEmptyLoops" value="true" />
            <message key="ws.notFollowed"
                value="WhitespaceAround: ''{0}'' is not followed by whitespace." />
            <message key="ws.notPreceded"
                value="WhitespaceAround: ''{0}'' is not preceded with whitespace." />
        </module>

        <module name="GenericWhitespace">
            <message key="ws.followed"
                value="GenericWhitespace ''{0}'' is followed by whitespace." />
            <message key="ws.preceded"
                value="GenericWhitespace ''{0}'' is preceded with whitespace." />
            <message key="ws.illegalFollow"
                value="GenericWhitespace ''{0}'' should followed by whitespace." />
            <message key="ws.notPreceded"
                value="GenericWhitespace ''{0}'' is not preceded with whitespace." />
        </module>

        <!-- Checks for imports    -->
        <!-- 必须导入类的完整路径，即不能使用*导入所需的类 -->
        <module name="AvoidStarImport" />

        <!-- 检查是否从非法的包中导入了类 illegalPkgs: 定义非法的包名称-->
        <module name="IllegalImport" /> <!-- defaults to sun.* packages -->

        <!-- 检查是否导入了不必显示导入的类-->
        <module name="RedundantImport" />

        <!-- 检查是否导入的包没有使用-->
        <module name="UnusedImports" />

        <!--option: 定义左大括号'{'显示位置，eol在同一行显示，nl在下一行显示
        maxLineLength: 大括号'{'所在行行最多容纳的字符数
        tokens: 该属性适用的类型，例：CLASS_DEF,INTERFACE_DEF,METHOD_DEF,CTOR_DEF -->
        <module name="LeftCurly">
            <property name="option" value="eol" />
        </module>

        <!--接口名称定义,以I开头-->
        <!--        <module name="TypeName">-->
        <!--            <property name="format" value="^I_[a-zA-Z0-9]*$"/>-->
        <!--            <property name="tokens" value="INTERFACE_DEF"/>-->
        <!--        </module>-->

        <!--检测TODO-->
        <!--        <module name="TodoComment">-->
        <!--            <property name="format" value="TODO"/>-->
        <!--        </module>-->

        <!--检测是否有不必要的括号-->
        <module name="UnnecessaryParentheses" />

        <!--检查代码块周围是否有大括号，可以检查do、else、if、for、while等关键字所控制的代码块-->
        <module name="NeedBraces">
            <property name="tokens"
                value="LITERAL_DO, LITERAL_ELSE, LITERAL_FOR, LITERAL_WHILE" /> <!-- LITERAL_IF 不检测-->
            <property name="allowSingleLineStatement" value="true" />
        </module>

        <!--检查else、try、catch标记的代码块的右花括号的放置位置-->
        <module name="RightCurly">
            <property name="id" value="RightCurlySame" />
            <property name="tokens"
                value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_DO" />
        </module>

        <module name="RightCurly">
            <property name="id" value="RightCurlyAlone" />
            <property name="option" value="alone" />
            <property name="tokens"
                value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT, INSTANCE_INIT" />
        </module>

        <!-- 检查在重写了equals方法后是否重写了hashCode方法 -->
        <module name="EqualsHashCode" />

        <!--检查是否有不合法的实例化操作，是否使用工厂方法更好-->
        <module name="IllegalInstantiation">
            <property name="classes" value="java.lang.Boolean" />
        </module>

        <!--检查Java代码的缩进是否正确-->
        <module name="Indentation">
            <property name="arrayInitIndent" value="8" />
        </module>

        <!-- Checks for Naming Conventions.   命名规范   -->
        <!-- local, final variables, including catch parameters -->
        <module name="LocalFinalVariableName" />

        <!-- local, non-final variables, including catch parameters-->
        <module name="LocalVariableName" />

        <!-- static, non-final fields -->
        <!--        <module name="StaticVariableName">-->
        <!--            <property name="format" value="(^[A-Z0-9_]{0,29}$)" />-->
        <!--        </module>-->

        <!-- packages -->
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$" />
        </module>

        <!-- classes and interfaces -->
        <module name="TypeName">
            <property name="format" value="(^[A-Z][a-zA-Z0-9]{0,36}$)" />
        </module>

        <!-- methods -->
        <module name="MethodName">
            <property name="format" value="(^[a-z][a-zA-Z0-9]{0,36}$)" />
        </module>

        <!-- non-static fields -->
        <module name="MemberName">
            <property name="format" value="(^[a|u|m][A-Z][a-zA-Z0-9]{0,29}$)" />
        </module>

        <!-- parameters -->
        <module name="ParameterName">
            <property name="format" value="(^[a-z][a-zA-Z0-9_]{0,29}$)" />
        </module>

        <!-- constants (static,  final fields) -->
        <module name="ConstantName">
            <property name="format" value="(^[A-Z0-9_]*$)" />
        </module>

        <!--  Checks for overly complicated boolean expressions. Currently finds code like  if (b == true), b || true, !false, etc.
            检查boolean值是否冗余的地方Rationale: Complex boolean logic makes code hard to understand and maintain. -->
        <module name="SimplifyBooleanExpression" />

        <!--  Checks for overly complicated boolean return statements. For example the following code
       检查是否存在过度复杂的boolean返回值
       if (valid())
          return false;
       else
          return true;
       could be written as
          return !valid();
       The Idea for this Check has been shamelessly stolen from the equivalent PMD rule. -->
        <module name="SimplifyBooleanReturn" />

        <!--检查每个变量是否使用一行一条语句进行声明-->
        <!--<module name="MultipleVariableDeclarations" />-->

        <!--检查数组定义的风格，默认java风格-->
        <module name="ArrayTypeStyle" />

        <!--检查long类型的常量在定义时是否由大写的“L”开头-->
        <module name="UpperEll" />

        <!--  Checks that switch statement has "default" clause. 检查switch语句是否有‘default’从句
   Rationale: It's usually a good idea to introduce a default case in every switch statement.
   Even if the developer is sure that all currently possible cases are covered, this should be expressed in the default branch,
    e.g. by using an assertion. This way the code is protected aginst later changes, e.g. introduction of new types in an enumeration type. -->
        <module name="MissingSwitchDefault" />

        <!--检查switch中case后是否加入了跳出语句，例如：return、break、throw、continue -->
        <module name="FallThrough" />

        <!-- Checks the number of parameters of a method or constructor. max default 7个. -->
        <module name="ParameterNumber">
            <property name="max" value="7" />
        </module>

        <!-- 每行字符数 -->
        <module name="LineLength">
            <property name="max" value="250" />
        </module>

        <!-- Checks for long methods and constructors. max default 150行. max=300 设置长度300 -->
        <module name="MethodLength">
            <property name="max" value="150" />
        </module>

        <!-- ModifierOrder 检查修饰符的顺序，默认是 public,protected,private,abstract,static,final,transient,volatile,synchronized,native -->
        <module name="ModifierOrder" />

        <!-- 检查是否有多余的修饰符，例如：接口中的方法不必使用public、abstract修饰  -->
        <!--<module name="RedundantModifier">-->
        <!--</module>-->

        <!--- 字符串比较必须使用 equals() -->
        <module name="StringLiteralEquality" />

        <!--限制try代码块的嵌套层数（默认值为1）-->
        <module name="NestedTryDepth">
            <property name="max" value="1" />
        </module>

        <!-- 返回个数 -->
        <module name="ReturnCount">
            <property name="max" value="5" />
            <property name="maxForVoid" value="5" />
            <property name="format" value="^$" />
        </module>

        <!-- if-else嵌套语句个数 最多2层 -->
        <module name="NestedIfDepth">
            <property name="max" value="2" />
        </module>

        <!-- 检查类和接口的javadoc 默认不检查author 和version tags
               authorFormat: 检查author标签的格式
               versionFormat: 检查version标签的格式
               scope: 可以检查的类的范围，例如：public只能检查public修饰的类，private可以检查所有的类
               excludeScope: 不能检查的类的范围，例如：public，public的类将不被检查，但访问权限小于public的类仍然会检查，其他的权限以此类推
               tokens: 该属性适用的类型，例如：CLASS_DEF,INTERFACE_DEF -->
        <module name="JavadocType">
            <property name="authorFormat" value="\S" />
            <property name="scope" value="protected" />
            <!-- 允许未知标签使用，例如@date -->
            <property name="allowUnknownTags" value="true" />
            <property name="tokens" value="CLASS_DEF,INTERFACE_DEF" />
        </module>

        <!-- 检查方法的javadoc的注释
               scope: 可以检查的方法的范围，例如：public只能检查public修饰的方法，private可以检查所有的方法
               allowMissingParamTags: 是否忽略对参数注释的检查
               allowMissingThrowsTags: 是否忽略对throws注释的检查
               allowMissingReturnTag: 是否忽略对return注释的检查 -->
        <module name="JavadocMethod">
            <property name="scope" value="public" />
            <property name="allowMissingParamTags" value="true" />
            <property name="allowMissingThrowsTags" value="true" />
            <property name="allowMissingReturnTag" value="true" />
            <property name="tokens" value="METHOD_DEF" />
            <property name="allowUndeclaredRTE" value="true" />
            <property name="allowThrowsTagsForSubclasses" value="true" />
            <!--允许get set 方法没有注释-->
            <property name="allowMissingPropertyJavadoc" value="true" />
        </module>

        <!-- 检查类变量的注释
               scope: 检查变量的范围，例如：public只能检查public修饰的变量，private可以检查所有的变量 -->
        <module name="JavadocVariable">
            <property name="scope" value="public" />
        </module>

        <module name="JavadocVariable">
            <property name="scope" value="private" />
        </module>

        <module name="JavadocVariable">
            <property name="scope" value="protected" />
        </module>

        <!-- Checks that a class which has only private constructors is declared as final.只有私有构造器的类必须声明为final-->
        <module name="FinalClass" />

        <!--  Checks visibility of class members. Only static final members may be public; other class members must be private unless property protectedAllowed or packageAllowed is set.
          检查class成员属性可见性。只有static final 修饰的成员是可以public的。其他的成员属性必需是private的，除非属性protectedAllowed或者packageAllowed设置了true.
           Public members are not flagged if the name matches the public member regular expression (contains "^serialVersionUID$" by default). Note: Checkstyle 2 used to include "^f[A-Z][a-zA-Z0-9]*$" in the default pattern to allow CMP for EJB 1.1 with the default settings. With EJB 2.0 it is not longer necessary to have public access for persistent fields, hence the default has been changed.
           Rationale: Enforce encapsulation. 强制封装 -->
        <module name="VisibilityModifier" />
    </module>

</module>